# Generated by Django 5.0.4 on 2024-05-27 15:42

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Repository",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.CharField(max_length=255, unique=True)),
                ("description", models.TextField(default="", null=True)),
                ("public_read", models.BooleanField(default=False)),
                ("public_write", models.BooleanField(default=False)),
            ],
            options={
                "permissions": [
                    ("READ_REPO_*", "Read from every repository"),
                    ("WRITE_REPO_*", "Write to every repository"),
                ],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("ROLE_ADMIN", "Admin"),
                            ("ROLE_REPO_MANAGER", "Repository Manager"),
                            ("ROLE_USER", "User"),
                        ],
                        default="ROLE_USER",
                        max_length=17,
                    ),
                ),
                ("default_inference", models.BooleanField(default=True)),
                ("default_sameas", models.BooleanField(default=True)),
                ("default_vis_graph_schema", models.BooleanField(default=True)),
                ("execute_count", models.BooleanField(default=True)),
                ("ignore_shared_queries", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="RepoPermission",
            fields=[
                (
                    "permission_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="auth.permission",
                    ),
                ),
                (
                    "repository",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="rdf4j.repository",
                    ),
                ),
            ],
            bases=("auth.permission",),
            managers=[
                ("objects", django.contrib.auth.models.PermissionManager()),
            ],
        ),
        migrations.CreateModel(
            name="SailConfiguration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "turtle_template",
                    models.TextField(
                        default='\n        @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.\n        @prefix config: <tag:rdf4j.org,2023:config/>.\n\n        [] a config:Repository ;\n        config:rep.id "${slug}" ;\n        rdfs:label "${description}" ;\n        config:rep.impl [\n            config:rep.type "openrdf:SailRepository" ;\n            config:sail.impl [\n                config:sail.type "openrdf:NativeStore" ;\n                config:native.tripleIndexes "spoc,opsc,cspo"\n            ]\n        ].\n        ',
                        help_text="Template for the repo ceation, passed though to RDF4J.\n    Available variables:\n    - ${slug}: The slug of the repo\n    - ${description}: The description of the repo\n    ",
                        null=True,
                    ),
                ),
                (
                    "repository",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="rdf4j.repository",
                    ),
                ),
            ],
        ),
    ]
